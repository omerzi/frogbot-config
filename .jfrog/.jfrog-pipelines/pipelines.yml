resources:
  - name: cron_trigger
    type: CronTrigger
    configuration:
      interval: '*/5 * * * *'     # Every 5 minutes
pipelines:
  - name: Frogbot
    steps:
      - name: Frogbot_Scan
        type: Bash # For Windows runner: PowerShell
        configuration:
          integrations:
            - name: jfrogPlatform
            - name: github
          inputResources:
            - name: cron_trigger
          environmentVariables:
            # [Mandatory only for projects which use npm, yarn 2, NuGet and .NET to download their dependencies]
            # The command that installs the project dependencies (e.g "npm i", "nuget restore" or "dotnet restore")
            JF_INSTALL_DEPS_CMD: ""
            # [Mandatory]
            # JFrog platform URL
            JF_URL: $int_jfrogPlatform_url
            # [Mandatory if JF_USER and JF_PASSWORD are not provided]
            # JFrog access token with 'read' permissions for Xray
            JF_ACCESS_TOKEN: $int_jfrogPlatform_accessToken
            # [Mandatory]
            # GitHub accesses token with the following permissions:
            # Read and Write access to code, pull requests, security events, and workflows
            JF_GIT_TOKEN: $int_github_token
            JF_GIT_PROVIDER: "github"
            # [Mandatory]
            # API endpoint to GitHub Enterprise server
            JF_GIT_API_ENDPOINT: $int_github_url
            # [Mandatory]
            # GitHub organization namespace
            JF_GIT_OWNER: ""
            # [Mandatory]
            # GitHub repository name
            JF_GIT_REPO: ""
            # Uncomment the below options if you'd like to use them.
            # [Optional, default: "."]
            # Relative path to the project in the git repository
            # JF_WORKING_DIR: path/to/project/dir
            # [Optional]
            # Xray Watches. Learn more about them here: https://www.jfrog.com/confluence/display/JFROG/Configuring+Xray+Watches
            # JF_WATCHES: <watch-1>,<watch-2>...<watch-n>
            # [Optional]
            # JFrog project. Learn more about it here: https://www.jfrog.com/confluence/display/JFROG/Projects
            # JF_PROJECT: <project-key>
            # [Optional, default: "FALSE"]
            # Displays all existing vulnerabilities, including the ones that were added by the pull request.
            # JF_INCLUDE_ALL_VULNERABILITIES: "TRUE"
            # [Optional, default: "TRUE"]
            # Fails the Frogbot task if any security issue is found.
            # JF_FAIL: "FALSE"
            # [Optional, default: "TRUE"]
            # Use Gradle Wrapper (gradlew/gradlew.bat) to run Gradle
            # JF_USE_WRAPPER: "TRUE"
        execution:
          onExecute:
            - curl -fLg "https://releases.jfrog.io/artifactory/frogbot/v2/[RELEASE]/getFrogbot.sh" | sh
            - ./frogbot scan-pull-requests
            # For Windows runner:
            # - iwr https://releases.jfrog.io/artifactory/frogbot/v2/[RELEASE]/frogbot-windows-amd64/frogbot.exe -OutFile .\frogbot.exe
            # - .\frogbot.exe scan-pull-requests